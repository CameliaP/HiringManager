// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HiringManager.Web.Integration.Tests.Features.Positions
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CreatePosition")]
    public partial class CreatePositionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CreatePosition.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CreatePosition", "In order to manage my staffing needs\r\nAs a manager\r\nI want to create an open posi" +
                    "tion for my organization", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create Position")]
        public virtual void CreatePosition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Position", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I want to create the position \'Senior Software Developer\' to start on \'June 1, 20" +
                    "11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("I submit the create position request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("the I should be redirected to the Position Index page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.And("the requested position should be listed on the Position Index Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("the requested position should have a status of \'Open\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Candidate")]
        public virtual void AddCandidate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Candidate", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I have created the position \'Senior Software Developer\' to start on \'June 1, 2011" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "EmailAddress",
                        "PhoneNumber"});
            table1.AddRow(new string[] {
                        "Fred Bob",
                        "fred@bob.com",
                        "555-123-1234"});
            table1.AddRow(new string[] {
                        "Bob Fred",
                        "bob@fred.com",
                        "555-234-1231"});
#line 15
 testRunner.When("I receive resumes from the following candidates", ((string)(null)), table1, "When ");
#line 19
 testRunner.Then("the requested position should have a 2 candidate(s) awaiting review count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "EmailAddress",
                        "PhoneNumber",
                        "Status"});
            table2.AddRow(new string[] {
                        "Fred Bob",
                        "fred@bob.com",
                        "555-123-1234",
                        "Resume Received"});
            table2.AddRow(new string[] {
                        "Bob Fred",
                        "bob@fred.com",
                        "555-234-1231",
                        "Resume Received"});
#line 20
 testRunner.And("the position details should contain the following candidates", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set Candidate Status")]
        public virtual void SetCandidateStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set Candidate Status", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I have created the position \'Senior Software Developer\' to start on \'June 1, 2011" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "EmailAddress",
                        "PhoneNumber"});
            table3.AddRow(new string[] {
                        "Fred Bob",
                        "fred@bob.com",
                        "555-123-1234"});
            table3.AddRow(new string[] {
                        "Bob Fred",
                        "bob@fred.com",
                        "555-234-1231"});
#line 27
 testRunner.And("I have received resumes from the following candidates", ((string)(null)), table3, "And ");
#line 31
 testRunner.When("I set the candidate status for \'Fred Bob\' to \'Phone Screened\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.Then("the requested position should have a 2 candidate(s) awaiting review count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "EmailAddress",
                        "PhoneNumber",
                        "Status"});
            table4.AddRow(new string[] {
                        "Fred Bob",
                        "fred@bob.com",
                        "555-123-1234",
                        "Phone Screened"});
            table4.AddRow(new string[] {
                        "Bob Fred",
                        "bob@fred.com",
                        "555-234-1231",
                        "Resume Received"});
#line 33
 testRunner.And("the position details should contain the following candidates", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pass on a Candidate")]
        public virtual void PassOnACandidate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pass on a Candidate", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("I have created the position \'Senior Software Developer\' to start on \'June 1, 2011" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "EmailAddress",
                        "PhoneNumber"});
            table5.AddRow(new string[] {
                        "Fred Bob",
                        "fred@bob.com",
                        "555-123-1234"});
            table5.AddRow(new string[] {
                        "Bob Fred",
                        "bob@fred.com",
                        "555-234-1231"});
#line 40
 testRunner.And("I have received resumes from the following candidates", ((string)(null)), table5, "And ");
#line 44
 testRunner.When("I pass on the candidate \'Fred Bob\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("the requested position should have a 1 candidate(s) awaiting review count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "EmailAddress",
                        "PhoneNumber",
                        "Status"});
            table6.AddRow(new string[] {
                        "Fred Bob",
                        "fred@bob.com",
                        "555-123-1234",
                        "Passed"});
            table6.AddRow(new string[] {
                        "Bob Fred",
                        "bob@fred.com",
                        "555-234-1231",
                        "Resume Received"});
#line 46
 testRunner.And("the position details should contain the following candidates", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
